<?php
/**
 * Customer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * e-conomic JSON-schema REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EconomicRest\Model;

use \ArrayAccess;
use \EconomicRest\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return CustomerModelFields
      */
    public static function GetModelFields(): CustomerModelFields
    {
        return new CustomerModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return CustomerModelAttributes
      */
    public static function GetModelAttributes(): CustomerModelAttributes
    {
        return new CustomerModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'balance' => 'float',
        'barred' => 'bool',
        'city' => 'string',
        'corporate_identification_number' => 'string',
        'p_number' => 'string',
        'country' => 'string',
        'credit_limit' => 'float',
        'currency' => 'string',
        'customer_number' => 'int',
        'due_amount' => 'float',
        'ean' => 'string',
        'email' => 'string',
        'last_updated' => 'string',
        'name' => 'string',
        'public_entry_number' => 'string',
        'telephone_and_fax_number' => 'string',
        'mobile_phone' => 'string',
        'e_invoicing_disabled_by_default' => 'bool',
        'vat_number' => 'string',
        'website' => 'string',
        'zip' => 'string',
        'contacts' => 'string',
        'delivery_locations' => 'string',
        'self' => 'string',
        'payment_terms' => '\EconomicRest\Model\PaymentTermHandler',
        'vat_zone' => '\EconomicRest\Model\VatZoneHandler',
        'customer_group' => '\EconomicRest\Model\CustomerGroupHandler'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'balance' => null,
        'barred' => null,
        'city' => null,
        'corporate_identification_number' => null,
        'p_number' => null,
        'country' => null,
        'credit_limit' => null,
        'currency' => null,
        'customer_number' => null,
        'due_amount' => null,
        'ean' => null,
        'email' => null,
        'last_updated' => 'full-date',
        'name' => null,
        'public_entry_number' => null,
        'telephone_and_fax_number' => null,
        'mobile_phone' => null,
        'e_invoicing_disabled_by_default' => null,
        'vat_number' => null,
        'website' => null,
        'zip' => null,
        'contacts' => 'uri',
        'delivery_locations' => 'uri',
        'self' => 'uri',
        'payment_terms' => null,
        'vat_zone' => null,
        'customer_group' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
        'balance' => false,
        'barred' => false,
        'city' => false,
        'corporate_identification_number' => false,
        'p_number' => false,
        'country' => false,
        'credit_limit' => false,
        'currency' => false,
        'customer_number' => false,
        'due_amount' => false,
        'ean' => false,
        'email' => false,
        'last_updated' => false,
        'name' => false,
        'public_entry_number' => false,
        'telephone_and_fax_number' => false,
        'mobile_phone' => false,
        'e_invoicing_disabled_by_default' => false,
        'vat_number' => false,
        'website' => false,
        'zip' => false,
        'contacts' => false,
        'delivery_locations' => false,
        'self' => false,
        'payment_terms' => false,
        'vat_zone' => false,
        'customer_group' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'balance' => 'balance',
        'barred' => 'barred',
        'city' => 'city',
        'corporate_identification_number' => 'corporateIdentificationNumber',
        'p_number' => 'pNumber',
        'country' => 'country',
        'credit_limit' => 'creditLimit',
        'currency' => 'currency',
        'customer_number' => 'customerNumber',
        'due_amount' => 'dueAmount',
        'ean' => 'ean',
        'email' => 'email',
        'last_updated' => 'lastUpdated',
        'name' => 'name',
        'public_entry_number' => 'publicEntryNumber',
        'telephone_and_fax_number' => 'telephoneAndFaxNumber',
        'mobile_phone' => 'mobilePhone',
        'e_invoicing_disabled_by_default' => 'eInvoicingDisabledByDefault',
        'vat_number' => 'vatNumber',
        'website' => 'website',
        'zip' => 'zip',
        'contacts' => 'contacts',
        'delivery_locations' => 'deliveryLocations',
        'self' => 'self',
        'payment_terms' => 'paymentTerms',
        'vat_zone' => 'vatZone',
        'customer_group' => 'customerGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'balance' => 'setBalance',
        'barred' => 'setBarred',
        'city' => 'setCity',
        'corporate_identification_number' => 'setCorporateIdentificationNumber',
        'p_number' => 'setPNumber',
        'country' => 'setCountry',
        'credit_limit' => 'setCreditLimit',
        'currency' => 'setCurrency',
        'customer_number' => 'setCustomerNumber',
        'due_amount' => 'setDueAmount',
        'ean' => 'setEan',
        'email' => 'setEmail',
        'last_updated' => 'setLastUpdated',
        'name' => 'setName',
        'public_entry_number' => 'setPublicEntryNumber',
        'telephone_and_fax_number' => 'setTelephoneAndFaxNumber',
        'mobile_phone' => 'setMobilePhone',
        'e_invoicing_disabled_by_default' => 'setEInvoicingDisabledByDefault',
        'vat_number' => 'setVatNumber',
        'website' => 'setWebsite',
        'zip' => 'setZip',
        'contacts' => 'setContacts',
        'delivery_locations' => 'setDeliveryLocations',
        'self' => 'setSelf',
        'payment_terms' => 'setPaymentTerms',
        'vat_zone' => 'setVatZone',
        'customer_group' => 'setCustomerGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'balance' => 'getBalance',
        'barred' => 'getBarred',
        'city' => 'getCity',
        'corporate_identification_number' => 'getCorporateIdentificationNumber',
        'p_number' => 'getPNumber',
        'country' => 'getCountry',
        'credit_limit' => 'getCreditLimit',
        'currency' => 'getCurrency',
        'customer_number' => 'getCustomerNumber',
        'due_amount' => 'getDueAmount',
        'ean' => 'getEan',
        'email' => 'getEmail',
        'last_updated' => 'getLastUpdated',
        'name' => 'getName',
        'public_entry_number' => 'getPublicEntryNumber',
        'telephone_and_fax_number' => 'getTelephoneAndFaxNumber',
        'mobile_phone' => 'getMobilePhone',
        'e_invoicing_disabled_by_default' => 'getEInvoicingDisabledByDefault',
        'vat_number' => 'getVatNumber',
        'website' => 'getWebsite',
        'zip' => 'getZip',
        'contacts' => 'getContacts',
        'delivery_locations' => 'getDeliveryLocations',
        'self' => 'getSelf',
        'payment_terms' => 'getPaymentTerms',
        'vat_zone' => 'getVatZone',
        'customer_group' => 'getCustomerGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('barred', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('corporate_identification_number', $data ?? [], null);
        $this->setIfExists('p_number', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('credit_limit', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('customer_number', $data ?? [], null);
        $this->setIfExists('due_amount', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('public_entry_number', $data ?? [], null);
        $this->setIfExists('telephone_and_fax_number', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('e_invoicing_disabled_by_default', $data ?? [], null);
        $this->setIfExists('vat_number', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('delivery_locations', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('payment_terms', $data ?? [], null);
        $this->setIfExists('vat_zone', $data ?? [], null);
        $this->setIfExists('customer_group', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 510)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 510.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['corporate_identification_number']) && (mb_strlen($this->container['corporate_identification_number']) > 40)) {
            $invalidProperties[] = "invalid value for 'corporate_identification_number', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['p_number']) && (mb_strlen($this->container['p_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'p_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['p_number']) && (mb_strlen($this->container['p_number']) < 10)) {
            $invalidProperties[] = "invalid value for 'p_number', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 50)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['customer_number']) && ($this->container['customer_number'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'customer_number', must be smaller than or equal to 999999999.";
        }

        if (!is_null($this->container['customer_number']) && ($this->container['customer_number'] < 1)) {
            $invalidProperties[] = "invalid value for 'customer_number', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ean']) && (mb_strlen($this->container['ean']) > 13)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['last_updated']) && !preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/", $this->container['last_updated'])) {
            $invalidProperties[] = "invalid value for 'last_updated', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['public_entry_number']) && (mb_strlen($this->container['public_entry_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'public_entry_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['telephone_and_fax_number']) && (mb_strlen($this->container['telephone_and_fax_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'telephone_and_fax_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 255)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['zip']) && (mb_strlen($this->container['zip']) > 30)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 30.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address for the customer including street and number.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        if ((mb_strlen($address) > 510)) {
            throw new \InvalidArgumentException('invalid length for $address when calling Customer., must be smaller than or equal to 510.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance The outstanding amount for this customer.
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets barred
     *
     * @return bool|null
     */
    public function getBarred()
    {
        return $this->container['barred'];
    }

    /**
     * Sets barred
     *
     * @param bool|null $barred Boolean indication of whether the customer is barred from invoicing.
     *
     * @return self
     */
    public function setBarred($barred)
    {
        if (is_null($barred)) {
            throw new \InvalidArgumentException('non-nullable barred cannot be null');
        }
        $this->container['barred'] = $barred;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The customer's city.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Customer., must be smaller than or equal to 50.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets corporate_identification_number
     *
     * @return string|null
     */
    public function getCorporateIdentificationNumber()
    {
        return $this->container['corporate_identification_number'];
    }

    /**
     * Sets corporate_identification_number
     *
     * @param string|null $corporate_identification_number Corporate Identification Number. For example CVR in Denmark.
     *
     * @return self
     */
    public function setCorporateIdentificationNumber($corporate_identification_number)
    {
        if (is_null($corporate_identification_number)) {
            throw new \InvalidArgumentException('non-nullable corporate_identification_number cannot be null');
        }
        if ((mb_strlen($corporate_identification_number) > 40)) {
            throw new \InvalidArgumentException('invalid length for $corporate_identification_number when calling Customer., must be smaller than or equal to 40.');
        }

        $this->container['corporate_identification_number'] = $corporate_identification_number;

        return $this;
    }

    /**
     * Gets p_number
     *
     * @return string|null
     */
    public function getPNumber()
    {
        return $this->container['p_number'];
    }

    /**
     * Sets p_number
     *
     * @param string|null $p_number Extension of corporate identification number (CVR). Identifying separate production unit (p-nummer).
     *
     * @return self
     */
    public function setPNumber($p_number)
    {
        if (is_null($p_number)) {
            throw new \InvalidArgumentException('non-nullable p_number cannot be null');
        }
        if ((mb_strlen($p_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $p_number when calling Customer., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($p_number) < 10)) {
            throw new \InvalidArgumentException('invalid length for $p_number when calling Customer., must be bigger than or equal to 10.');
        }

        $this->container['p_number'] = $p_number;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The customer's country.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if ((mb_strlen($country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Customer., must be smaller than or equal to 50.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return float|null
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param float|null $credit_limit A maximum credit for this customer. Once the maximum is reached or passed in connection with an order/quotation/invoice for this customer you see a warning in e-conomic.
     *
     * @return self
     */
    public function setCreditLimit($credit_limit)
    {
        if (is_null($credit_limit)) {
            throw new \InvalidArgumentException('non-nullable credit_limit cannot be null');
        }
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Default payment currency.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        if ((mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling Customer., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling Customer., must be bigger than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return int|null
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param int|null $customer_number The customer number is a positive unique numerical identifier with a maximum of 9 digits.
     *
     * @return self
     */
    public function setCustomerNumber($customer_number)
    {
        if (is_null($customer_number)) {
            throw new \InvalidArgumentException('non-nullable customer_number cannot be null');
        }

        if (($customer_number > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $customer_number when calling Customer., must be smaller than or equal to 999999999.');
        }
        if (($customer_number < 1)) {
            throw new \InvalidArgumentException('invalid value for $customer_number when calling Customer., must be bigger than or equal to 1.');
        }

        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets due_amount
     *
     * @return float|null
     */
    public function getDueAmount()
    {
        return $this->container['due_amount'];
    }

    /**
     * Sets due_amount
     *
     * @param float|null $due_amount Due amount that the customer needs to pay.
     *
     * @return self
     */
    public function setDueAmount($due_amount)
    {
        if (is_null($due_amount)) {
            throw new \InvalidArgumentException('non-nullable due_amount cannot be null');
        }
        $this->container['due_amount'] = $due_amount;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean European Article Number. EAN is used for invoicing the Danish public sector.
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }
        if ((mb_strlen($ean) > 13)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling Customer., must be smaller than or equal to 13.');
        }

        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Customer e-mail address where e-conomic invoices should be emailed. Note: you can specify multiple email addresses in this field, separated by a space. If you need to send a copy of the invoice or write to other e-mail addresses, you can also create one or more customer contacts.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Customer., must be smaller than or equal to 255.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string|null $last_updated The date this customer was last updated. The date is formatted according to ISO-8601.
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }

        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/", ObjectSerializer::toString($last_updated)))) {
            throw new \InvalidArgumentException("invalid value for \$last_updated when calling Customer., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/.");
        }

        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The customer name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Customer., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Customer., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets public_entry_number
     *
     * @return string|null
     */
    public function getPublicEntryNumber()
    {
        return $this->container['public_entry_number'];
    }

    /**
     * Sets public_entry_number
     *
     * @param string|null $public_entry_number The public entry number is used for electronic invoicing, to define the account invoices will be registered on at the customer.
     *
     * @return self
     */
    public function setPublicEntryNumber($public_entry_number)
    {
        if (is_null($public_entry_number)) {
            throw new \InvalidArgumentException('non-nullable public_entry_number cannot be null');
        }
        if ((mb_strlen($public_entry_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $public_entry_number when calling Customer., must be smaller than or equal to 50.');
        }

        $this->container['public_entry_number'] = $public_entry_number;

        return $this;
    }

    /**
     * Gets telephone_and_fax_number
     *
     * @return string|null
     */
    public function getTelephoneAndFaxNumber()
    {
        return $this->container['telephone_and_fax_number'];
    }

    /**
     * Sets telephone_and_fax_number
     *
     * @param string|null $telephone_and_fax_number The customer's telephone and/or fax number.
     *
     * @return self
     */
    public function setTelephoneAndFaxNumber($telephone_and_fax_number)
    {
        if (is_null($telephone_and_fax_number)) {
            throw new \InvalidArgumentException('non-nullable telephone_and_fax_number cannot be null');
        }
        if ((mb_strlen($telephone_and_fax_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $telephone_and_fax_number when calling Customer., must be smaller than or equal to 255.');
        }

        $this->container['telephone_and_fax_number'] = $telephone_and_fax_number;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone The customer's mobile phone number.
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        if ((mb_strlen($mobile_phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling Customer., must be smaller than or equal to 50.');
        }

        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets e_invoicing_disabled_by_default
     *
     * @return bool|null
     */
    public function getEInvoicingDisabledByDefault()
    {
        return $this->container['e_invoicing_disabled_by_default'];
    }

    /**
     * Sets e_invoicing_disabled_by_default
     *
     * @param bool|null $e_invoicing_disabled_by_default Boolean indication of whether the default sending method should be email instead of e-invoice. This property is updatable only by using PATCH to /customers/:customerNumber
     *
     * @return self
     */
    public function setEInvoicingDisabledByDefault($e_invoicing_disabled_by_default)
    {
        if (is_null($e_invoicing_disabled_by_default)) {
            throw new \InvalidArgumentException('non-nullable e_invoicing_disabled_by_default cannot be null');
        }
        $this->container['e_invoicing_disabled_by_default'] = $e_invoicing_disabled_by_default;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string|null
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string|null $vat_number The customer's value added tax identification number. This field is only available to agreements in Sweden, UK, Germany, Poland and Finland. Not to be mistaken for the danish CVR number, which is defined on the corporateIdentificationNumber property.
     *
     * @return self
     */
    public function setVatNumber($vat_number)
    {
        if (is_null($vat_number)) {
            throw new \InvalidArgumentException('non-nullable vat_number cannot be null');
        }
        if ((mb_strlen($vat_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling Customer., must be smaller than or equal to 20.');
        }

        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website Customer website, if applicable.
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        if ((mb_strlen($website) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website when calling Customer., must be smaller than or equal to 255.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip The customer's postcode.
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        if ((mb_strlen($zip) > 30)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling Customer., must be smaller than or equal to 30.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return string|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param string|null $contacts A unique link reference to the customer contacts items.
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets delivery_locations
     *
     * @return string|null
     */
    public function getDeliveryLocations()
    {
        return $this->container['delivery_locations'];
    }

    /**
     * Sets delivery_locations
     *
     * @param string|null $delivery_locations A unique link reference to the customer delivery locations items.
     *
     * @return self
     */
    public function setDeliveryLocations($delivery_locations)
    {
        if (is_null($delivery_locations)) {
            throw new \InvalidArgumentException('non-nullable delivery_locations cannot be null');
        }
        $this->container['delivery_locations'] = $delivery_locations;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self A unique link reference to the delivery location.
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return \EconomicRest\Model\PaymentTermHandler|null
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param \EconomicRest\Model\PaymentTermHandler|null $payment_terms payment_terms
     *
     * @return self
     */
    public function setPaymentTerms($payment_terms)
    {
        if (is_null($payment_terms)) {
            throw new \InvalidArgumentException('non-nullable payment_terms cannot be null');
        }
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets vat_zone
     *
     * @return \EconomicRest\Model\VatZoneHandler|null
     */
    public function getVatZone()
    {
        return $this->container['vat_zone'];
    }

    /**
     * Sets vat_zone
     *
     * @param \EconomicRest\Model\VatZoneHandler|null $vat_zone vat_zone
     *
     * @return self
     */
    public function setVatZone($vat_zone)
    {
        if (is_null($vat_zone)) {
            throw new \InvalidArgumentException('non-nullable vat_zone cannot be null');
        }
        $this->container['vat_zone'] = $vat_zone;

        return $this;
    }

    /**
     * Gets customer_group
     *
     * @return \EconomicRest\Model\CustomerGroupHandler|null
     */
    public function getCustomerGroup()
    {
        return $this->container['customer_group'];
    }

    /**
     * Sets customer_group
     *
     * @param \EconomicRest\Model\CustomerGroupHandler|null $customer_group customer_group
     *
     * @return self
     */
    public function setCustomerGroup($customer_group)
    {
        if (is_null($customer_group)) {
            throw new \InvalidArgumentException('non-nullable customer_group cannot be null');
        }
        $this->container['customer_group'] = $customer_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


