<?php
/**
 * VoucherEntries
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * e-conomic JSON-schema REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EconomicRest\Model;

use \ArrayAccess;
use \EconomicRest\ObjectSerializer;

/**
 * VoucherEntries Class Doc Comment
 *
 * @category Class
 * @description Entries, separated by type, for the journal.
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VoucherEntries implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return VoucherEntriesModelFields
      */
    public static function GetModelFields(): VoucherEntriesModelFields
    {
        return new VoucherEntriesModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return VoucherEntriesModelAttributes
      */
    public static function GetModelAttributes(): VoucherEntriesModelAttributes
    {
        return new VoucherEntriesModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VoucherEntries';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'finance_vouchers' => '\EconomicRest\Model\FinanceVoucherEntry[]',
        'customer_payments' => '\EconomicRest\Model\CustomerPaymentEntry[]',
        'supplier_invoices' => '\EconomicRest\Model\SupplierInvoiceEntry[]',
        'supplier_payments' => '\EconomicRest\Model\SupplierPaymentEntry[]',
        'manual_customer_invoices' => '\EconomicRest\Model\ManualCustomerInvoiceEntry[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'finance_vouchers' => null,
        'customer_payments' => null,
        'supplier_invoices' => null,
        'supplier_payments' => null,
        'manual_customer_invoices' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'finance_vouchers' => false,
		'customer_payments' => false,
		'supplier_invoices' => false,
		'supplier_payments' => false,
		'manual_customer_invoices' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'finance_vouchers' => 'financeVouchers',
        'customer_payments' => 'customerPayments',
        'supplier_invoices' => 'supplierInvoices',
        'supplier_payments' => 'supplierPayments',
        'manual_customer_invoices' => 'manualCustomerInvoices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'finance_vouchers' => 'setFinanceVouchers',
        'customer_payments' => 'setCustomerPayments',
        'supplier_invoices' => 'setSupplierInvoices',
        'supplier_payments' => 'setSupplierPayments',
        'manual_customer_invoices' => 'setManualCustomerInvoices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'finance_vouchers' => 'getFinanceVouchers',
        'customer_payments' => 'getCustomerPayments',
        'supplier_invoices' => 'getSupplierInvoices',
        'supplier_payments' => 'getSupplierPayments',
        'manual_customer_invoices' => 'getManualCustomerInvoices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('finance_vouchers', $data ?? [], null);
        $this->setIfExists('customer_payments', $data ?? [], null);
        $this->setIfExists('supplier_invoices', $data ?? [], null);
        $this->setIfExists('supplier_payments', $data ?? [], null);
        $this->setIfExists('manual_customer_invoices', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets finance_vouchers
     *
     * @return \EconomicRest\Model\FinanceVoucherEntry[]|null
     */
    public function getFinanceVouchers()
    {
        return $this->container['finance_vouchers'];
    }

    /**
     * Sets finance_vouchers
     *
     * @param \EconomicRest\Model\FinanceVoucherEntry[]|null $finance_vouchers An array containing finance vouchers.
     *
     * @return self
     */
    public function setFinanceVouchers($finance_vouchers)
    {
        if (is_null($finance_vouchers)) {
            throw new \InvalidArgumentException('non-nullable finance_vouchers cannot be null');
        }
        $this->container['finance_vouchers'] = $finance_vouchers;

        return $this;
    }

    /**
     * Gets customer_payments
     *
     * @return \EconomicRest\Model\CustomerPaymentEntry[]|null
     */
    public function getCustomerPayments()
    {
        return $this->container['customer_payments'];
    }

    /**
     * Sets customer_payments
     *
     * @param \EconomicRest\Model\CustomerPaymentEntry[]|null $customer_payments An array containing customer payments.
     *
     * @return self
     */
    public function setCustomerPayments($customer_payments)
    {
        if (is_null($customer_payments)) {
            throw new \InvalidArgumentException('non-nullable customer_payments cannot be null');
        }
        $this->container['customer_payments'] = $customer_payments;

        return $this;
    }

    /**
     * Gets supplier_invoices
     *
     * @return \EconomicRest\Model\SupplierInvoiceEntry[]|null
     */
    public function getSupplierInvoices()
    {
        return $this->container['supplier_invoices'];
    }

    /**
     * Sets supplier_invoices
     *
     * @param \EconomicRest\Model\SupplierInvoiceEntry[]|null $supplier_invoices An array containing finance vouchers.
     *
     * @return self
     */
    public function setSupplierInvoices($supplier_invoices)
    {
        if (is_null($supplier_invoices)) {
            throw new \InvalidArgumentException('non-nullable supplier_invoices cannot be null');
        }
        $this->container['supplier_invoices'] = $supplier_invoices;

        return $this;
    }

    /**
     * Gets supplier_payments
     *
     * @return \EconomicRest\Model\SupplierPaymentEntry[]|null
     */
    public function getSupplierPayments()
    {
        return $this->container['supplier_payments'];
    }

    /**
     * Sets supplier_payments
     *
     * @param \EconomicRest\Model\SupplierPaymentEntry[]|null $supplier_payments An array containing finance vouchers.
     *
     * @return self
     */
    public function setSupplierPayments($supplier_payments)
    {
        if (is_null($supplier_payments)) {
            throw new \InvalidArgumentException('non-nullable supplier_payments cannot be null');
        }
        $this->container['supplier_payments'] = $supplier_payments;

        return $this;
    }

    /**
     * Gets manual_customer_invoices
     *
     * @return \EconomicRest\Model\ManualCustomerInvoiceEntry[]|null
     */
    public function getManualCustomerInvoices()
    {
        return $this->container['manual_customer_invoices'];
    }

    /**
     * Sets manual_customer_invoices
     *
     * @param \EconomicRest\Model\ManualCustomerInvoiceEntry[]|null $manual_customer_invoices An array containing finance vouchers.
     *
     * @return self
     */
    public function setManualCustomerInvoices($manual_customer_invoices)
    {
        if (is_null($manual_customer_invoices)) {
            throw new \InvalidArgumentException('non-nullable manual_customer_invoices cannot be null');
        }
        $this->container['manual_customer_invoices'] = $manual_customer_invoices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


