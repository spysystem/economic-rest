<?php
/**
 * GetCompanySettingsResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * e-conomic JSON-schema REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EconomicRest\Model;

use \ArrayAccess;
use \EconomicRest\ObjectSerializer;

/**
 * GetCompanySettingsResponse Class Doc Comment
 *
 * @category Class
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetCompanySettingsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return GetCompanySettingsResponseModelFields
      */
    public static function GetModelFields(): GetCompanySettingsResponseModelFields
    {
        return new GetCompanySettingsResponseModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return GetCompanySettingsResponseModelAttributes
      */
    public static function GetModelAttributes(): GetCompanySettingsResponseModelAttributes
    {
        return new GetCompanySettingsResponseModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetCompanySettingsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'agreement_number' => 'int',
        'agreement_type' => '\EconomicRest\Model\AgreementType',
        'user_name' => 'string',
        'signup_date' => 'string',
        'user' => '\EconomicRest\Model\User',
        'company' => '\EconomicRest\Model\Company',
        'bank_information' => '\EconomicRest\Model\BankInformation',
        'application' => '\EconomicRest\Model\Application',
        'settings' => '\EconomicRest\Model\CompanySettings',
        'company_affiliation' => 'string',
        'can_send_electronic_invoice' => 'bool',
        'modules' => '\EconomicRest\Model\Module[]',
        'self' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'agreement_number' => null,
        'agreement_type' => null,
        'user_name' => null,
        'signup_date' => null,
        'user' => null,
        'company' => null,
        'bank_information' => null,
        'application' => null,
        'settings' => null,
        'company_affiliation' => null,
        'can_send_electronic_invoice' => null,
        'modules' => null,
        'self' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'agreement_number' => false,
		'agreement_type' => false,
		'user_name' => false,
		'signup_date' => false,
		'user' => false,
		'company' => false,
		'bank_information' => false,
		'application' => false,
		'settings' => false,
		'company_affiliation' => false,
		'can_send_electronic_invoice' => false,
		'modules' => false,
		'self' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agreement_number' => 'agreementNumber',
        'agreement_type' => 'agreementType',
        'user_name' => 'userName',
        'signup_date' => 'signupDate',
        'user' => 'user',
        'company' => 'company',
        'bank_information' => 'bankInformation',
        'application' => 'application',
        'settings' => 'settings',
        'company_affiliation' => 'companyAffiliation',
        'can_send_electronic_invoice' => 'canSendElectronicInvoice',
        'modules' => 'modules',
        'self' => 'self'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agreement_number' => 'setAgreementNumber',
        'agreement_type' => 'setAgreementType',
        'user_name' => 'setUserName',
        'signup_date' => 'setSignupDate',
        'user' => 'setUser',
        'company' => 'setCompany',
        'bank_information' => 'setBankInformation',
        'application' => 'setApplication',
        'settings' => 'setSettings',
        'company_affiliation' => 'setCompanyAffiliation',
        'can_send_electronic_invoice' => 'setCanSendElectronicInvoice',
        'modules' => 'setModules',
        'self' => 'setSelf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agreement_number' => 'getAgreementNumber',
        'agreement_type' => 'getAgreementType',
        'user_name' => 'getUserName',
        'signup_date' => 'getSignupDate',
        'user' => 'getUser',
        'company' => 'getCompany',
        'bank_information' => 'getBankInformation',
        'application' => 'getApplication',
        'settings' => 'getSettings',
        'company_affiliation' => 'getCompanyAffiliation',
        'can_send_electronic_invoice' => 'getCanSendElectronicInvoice',
        'modules' => 'getModules',
        'self' => 'getSelf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('agreement_number', $data ?? [], null);
        $this->setIfExists('agreement_type', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('signup_date', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('bank_information', $data ?? [], null);
        $this->setIfExists('application', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
        $this->setIfExists('company_affiliation', $data ?? [], null);
        $this->setIfExists('can_send_electronic_invoice', $data ?? [], null);
        $this->setIfExists('modules', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agreement_number
     *
     * @return int|null
     */
    public function getAgreementNumber()
    {
        return $this->container['agreement_number'];
    }

    /**
     * Sets agreement_number
     *
     * @param int|null $agreement_number agreement_number
     *
     * @return self
     */
    public function setAgreementNumber($agreement_number)
    {
        if (is_null($agreement_number)) {
            throw new \InvalidArgumentException('non-nullable agreement_number cannot be null');
        }
        $this->container['agreement_number'] = $agreement_number;

        return $this;
    }

    /**
     * Gets agreement_type
     *
     * @return \EconomicRest\Model\AgreementType|null
     */
    public function getAgreementType()
    {
        return $this->container['agreement_type'];
    }

    /**
     * Sets agreement_type
     *
     * @param \EconomicRest\Model\AgreementType|null $agreement_type agreement_type
     *
     * @return self
     */
    public function setAgreementType($agreement_type)
    {
        if (is_null($agreement_type)) {
            throw new \InvalidArgumentException('non-nullable agreement_type cannot be null');
        }
        $this->container['agreement_type'] = $agreement_type;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets signup_date
     *
     * @return string|null
     */
    public function getSignupDate()
    {
        return $this->container['signup_date'];
    }

    /**
     * Sets signup_date
     *
     * @param string|null $signup_date signup_date
     *
     * @return self
     */
    public function setSignupDate($signup_date)
    {
        if (is_null($signup_date)) {
            throw new \InvalidArgumentException('non-nullable signup_date cannot be null');
        }
        $this->container['signup_date'] = $signup_date;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \EconomicRest\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \EconomicRest\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \EconomicRest\Model\Company|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \EconomicRest\Model\Company|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets bank_information
     *
     * @return \EconomicRest\Model\BankInformation|null
     */
    public function getBankInformation()
    {
        return $this->container['bank_information'];
    }

    /**
     * Sets bank_information
     *
     * @param \EconomicRest\Model\BankInformation|null $bank_information bank_information
     *
     * @return self
     */
    public function setBankInformation($bank_information)
    {
        if (is_null($bank_information)) {
            throw new \InvalidArgumentException('non-nullable bank_information cannot be null');
        }
        $this->container['bank_information'] = $bank_information;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \EconomicRest\Model\Application|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \EconomicRest\Model\Application|null $application application
     *
     * @return self
     */
    public function setApplication($application)
    {
        if (is_null($application)) {
            throw new \InvalidArgumentException('non-nullable application cannot be null');
        }
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \EconomicRest\Model\CompanySettings|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \EconomicRest\Model\CompanySettings|null $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {
        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets company_affiliation
     *
     * @return string|null
     */
    public function getCompanyAffiliation()
    {
        return $this->container['company_affiliation'];
    }

    /**
     * Sets company_affiliation
     *
     * @param string|null $company_affiliation company_affiliation
     *
     * @return self
     */
    public function setCompanyAffiliation($company_affiliation)
    {
        if (is_null($company_affiliation)) {
            throw new \InvalidArgumentException('non-nullable company_affiliation cannot be null');
        }
        $this->container['company_affiliation'] = $company_affiliation;

        return $this;
    }

    /**
     * Gets can_send_electronic_invoice
     *
     * @return bool|null
     */
    public function getCanSendElectronicInvoice()
    {
        return $this->container['can_send_electronic_invoice'];
    }

    /**
     * Sets can_send_electronic_invoice
     *
     * @param bool|null $can_send_electronic_invoice can_send_electronic_invoice
     *
     * @return self
     */
    public function setCanSendElectronicInvoice($can_send_electronic_invoice)
    {
        if (is_null($can_send_electronic_invoice)) {
            throw new \InvalidArgumentException('non-nullable can_send_electronic_invoice cannot be null');
        }
        $this->container['can_send_electronic_invoice'] = $can_send_electronic_invoice;

        return $this;
    }

    /**
     * Gets modules
     *
     * @return \EconomicRest\Model\Module[]|null
     */
    public function getModules()
    {
        return $this->container['modules'];
    }

    /**
     * Sets modules
     *
     * @param \EconomicRest\Model\Module[]|null $modules modules
     *
     * @return self
     */
    public function setModules($modules)
    {
        if (is_null($modules)) {
            throw new \InvalidArgumentException('non-nullable modules cannot be null');
        }
        $this->container['modules'] = $modules;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


