<?php
/**
 * Entry
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * e-conomic JSON-schema REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EconomicRest\Model;

use \ArrayAccess;
use \EconomicRest\ObjectSerializer;

/**
 * Entry Class Doc Comment
 *
 * @category Class
 * @description A specific entry in the accounting year.
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Entry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return EntryModelFields
      */
    public static function GetModelFields(): EntryModelFields
    {
        return new EntryModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return EntryModelAttributes
      */
    public static function GetModelAttributes(): EntryModelAttributes
    {
        return new EntryModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Entry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account' => '\EconomicRest\Model\AccountHandler',
        'amount' => 'float',
        'supplier_invoice_number' => 'string',
        'amount_in_base_currency' => 'float',
        'currency' => 'string',
        'date' => 'string',
        'due_date' => 'string',
        'departmental_distribution' => '\EconomicRest\Model\DepartmentalDistributionHandler',
        'project' => '\EconomicRest\Model\ProjectHandler',
        'cost_type' => '\EconomicRest\Model\CostTypeHandler',
        'entry_number' => 'int',
        'text' => 'string',
        'entry_type' => 'string',
        'vat_account' => '\EconomicRest\Model\VatAccountHandler',
        'customer' => '\EconomicRest\Model\CustomerHandler',
        'supplier' => '\EconomicRest\Model\SupplierHandler',
        'unit1' => '\EconomicRest\Model\UnitHandler',
        'unit2' => '\EconomicRest\Model\UnitHandler',
        'quantity1' => 'float',
        'quantity2' => 'float',
        'voucher_number' => 'int',
        'booked_invoice' => '\EconomicRest\Model\BookedInvoiceHandler',
        'invoice_number' => 'string',
        'remainder' => 'float',
        'remainder_in_base_currency' => 'float',
        'payment_details' => '\EconomicRest\Model\PaymentDetailsHandler',
        'self' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account' => null,
        'amount' => null,
        'supplier_invoice_number' => null,
        'amount_in_base_currency' => null,
        'currency' => null,
        'date' => 'full-date',
        'due_date' => 'full-date',
        'departmental_distribution' => null,
        'project' => null,
        'cost_type' => null,
        'entry_number' => null,
        'text' => null,
        'entry_type' => null,
        'vat_account' => null,
        'customer' => null,
        'supplier' => null,
        'unit1' => null,
        'unit2' => null,
        'quantity1' => null,
        'quantity2' => null,
        'voucher_number' => null,
        'booked_invoice' => null,
        'invoice_number' => null,
        'remainder' => null,
        'remainder_in_base_currency' => null,
        'payment_details' => null,
        'self' => 'uri'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account' => false,
		'amount' => false,
		'supplier_invoice_number' => false,
		'amount_in_base_currency' => false,
		'currency' => false,
		'date' => false,
		'due_date' => false,
		'departmental_distribution' => false,
		'project' => false,
		'cost_type' => false,
		'entry_number' => false,
		'text' => false,
		'entry_type' => false,
		'vat_account' => false,
		'customer' => false,
		'supplier' => false,
		'unit1' => false,
		'unit2' => false,
		'quantity1' => false,
		'quantity2' => false,
		'voucher_number' => false,
		'booked_invoice' => false,
		'invoice_number' => false,
		'remainder' => false,
		'remainder_in_base_currency' => false,
		'payment_details' => false,
		'self' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'amount' => 'amount',
        'supplier_invoice_number' => 'supplierInvoiceNumber',
        'amount_in_base_currency' => 'amountInBaseCurrency',
        'currency' => 'currency',
        'date' => 'date',
        'due_date' => 'dueDate',
        'departmental_distribution' => 'departmentalDistribution',
        'project' => 'project',
        'cost_type' => 'costType',
        'entry_number' => 'entryNumber',
        'text' => 'text',
        'entry_type' => 'entryType',
        'vat_account' => 'vatAccount',
        'customer' => 'customer',
        'supplier' => 'supplier',
        'unit1' => 'unit1',
        'unit2' => 'unit2',
        'quantity1' => 'quantity1',
        'quantity2' => 'quantity2',
        'voucher_number' => 'voucherNumber',
        'booked_invoice' => 'bookedInvoice',
        'invoice_number' => 'invoiceNumber',
        'remainder' => 'remainder',
        'remainder_in_base_currency' => 'remainderInBaseCurrency',
        'payment_details' => 'paymentDetails',
        'self' => 'self'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'amount' => 'setAmount',
        'supplier_invoice_number' => 'setSupplierInvoiceNumber',
        'amount_in_base_currency' => 'setAmountInBaseCurrency',
        'currency' => 'setCurrency',
        'date' => 'setDate',
        'due_date' => 'setDueDate',
        'departmental_distribution' => 'setDepartmentalDistribution',
        'project' => 'setProject',
        'cost_type' => 'setCostType',
        'entry_number' => 'setEntryNumber',
        'text' => 'setText',
        'entry_type' => 'setEntryType',
        'vat_account' => 'setVatAccount',
        'customer' => 'setCustomer',
        'supplier' => 'setSupplier',
        'unit1' => 'setUnit1',
        'unit2' => 'setUnit2',
        'quantity1' => 'setQuantity1',
        'quantity2' => 'setQuantity2',
        'voucher_number' => 'setVoucherNumber',
        'booked_invoice' => 'setBookedInvoice',
        'invoice_number' => 'setInvoiceNumber',
        'remainder' => 'setRemainder',
        'remainder_in_base_currency' => 'setRemainderInBaseCurrency',
        'payment_details' => 'setPaymentDetails',
        'self' => 'setSelf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'amount' => 'getAmount',
        'supplier_invoice_number' => 'getSupplierInvoiceNumber',
        'amount_in_base_currency' => 'getAmountInBaseCurrency',
        'currency' => 'getCurrency',
        'date' => 'getDate',
        'due_date' => 'getDueDate',
        'departmental_distribution' => 'getDepartmentalDistribution',
        'project' => 'getProject',
        'cost_type' => 'getCostType',
        'entry_number' => 'getEntryNumber',
        'text' => 'getText',
        'entry_type' => 'getEntryType',
        'vat_account' => 'getVatAccount',
        'customer' => 'getCustomer',
        'supplier' => 'getSupplier',
        'unit1' => 'getUnit1',
        'unit2' => 'getUnit2',
        'quantity1' => 'getQuantity1',
        'quantity2' => 'getQuantity2',
        'voucher_number' => 'getVoucherNumber',
        'booked_invoice' => 'getBookedInvoice',
        'invoice_number' => 'getInvoiceNumber',
        'remainder' => 'getRemainder',
        'remainder_in_base_currency' => 'getRemainderInBaseCurrency',
        'payment_details' => 'getPaymentDetails',
        'self' => 'getSelf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ENTRY_TYPE_CUSTOMER_INVOICE = 'customerInvoice';
    public const ENTRY_TYPE_CUSTOMER_PAYMENT = 'customerPayment';
    public const ENTRY_TYPE_SUPPLIER_INVOICE = 'supplierInvoice';
    public const ENTRY_TYPE_SUPPLIER_PAYMENT = 'supplierPayment';
    public const ENTRY_TYPE_FINANCE_VOUCHER = 'financeVoucher';
    public const ENTRY_TYPE_REMINDER = 'reminder';
    public const ENTRY_TYPE_OPENING_ENTRY = 'openingEntry';
    public const ENTRY_TYPE_TRANSFERRED_OPENING_ENTRY = 'transferredOpeningEntry';
    public const ENTRY_TYPE_SYSTEM_ENTRY = 'systemEntry';
    public const ENTRY_TYPE_MANUAL_DEBTOR_INVOICE = 'manualDebtorInvoice';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntryTypeAllowableValues()
    {
        return [
            self::ENTRY_TYPE_CUSTOMER_INVOICE,
            self::ENTRY_TYPE_CUSTOMER_PAYMENT,
            self::ENTRY_TYPE_SUPPLIER_INVOICE,
            self::ENTRY_TYPE_SUPPLIER_PAYMENT,
            self::ENTRY_TYPE_FINANCE_VOUCHER,
            self::ENTRY_TYPE_REMINDER,
            self::ENTRY_TYPE_OPENING_ENTRY,
            self::ENTRY_TYPE_TRANSFERRED_OPENING_ENTRY,
            self::ENTRY_TYPE_SYSTEM_ENTRY,
            self::ENTRY_TYPE_MANUAL_DEBTOR_INVOICE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('supplier_invoice_number', $data ?? [], null);
        $this->setIfExists('amount_in_base_currency', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('departmental_distribution', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('cost_type', $data ?? [], null);
        $this->setIfExists('entry_number', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('entry_type', $data ?? [], null);
        $this->setIfExists('vat_account', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('unit1', $data ?? [], null);
        $this->setIfExists('unit2', $data ?? [], null);
        $this->setIfExists('quantity1', $data ?? [], null);
        $this->setIfExists('quantity2', $data ?? [], null);
        $this->setIfExists('voucher_number', $data ?? [], null);
        $this->setIfExists('booked_invoice', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('remainder', $data ?? [], null);
        $this->setIfExists('remainder_in_base_currency', $data ?? [], null);
        $this->setIfExists('payment_details', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['currency']) && !preg_match("/[a-zA-Z]{3}/", $this->container['currency'])) {
            $invalidProperties[] = "invalid value for 'currency', must be conform to the pattern /[a-zA-Z]{3}/.";
        }

        if (!is_null($this->container['date']) && !preg_match("/\\d{4}-\\d{2}-\\d{2}/", $this->container['date'])) {
            $invalidProperties[] = "invalid value for 'date', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}/.";
        }

        if (!is_null($this->container['due_date']) && !preg_match("/\\d{4}-\\d{2}-\\d{2}/", $this->container['due_date'])) {
            $invalidProperties[] = "invalid value for 'due_date', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}/.";
        }

        if (!is_null($this->container['text']) && (mb_strlen($this->container['text']) > 255)) {
            $invalidProperties[] = "invalid value for 'text', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getEntryTypeAllowableValues();
        if (!is_null($this->container['entry_type']) && !in_array($this->container['entry_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entry_type', must be one of '%s'",
                $this->container['entry_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return \EconomicRest\Model\AccountHandler|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \EconomicRest\Model\AccountHandler|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The total entry amount.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets supplier_invoice_number
     *
     * @return string|null
     */
    public function getSupplierInvoiceNumber()
    {
        return $this->container['supplier_invoice_number'];
    }

    /**
     * Sets supplier_invoice_number
     *
     * @param string|null $supplier_invoice_number A unique identifier of the supplier invoice.
     *
     * @return self
     */
    public function setSupplierInvoiceNumber($supplier_invoice_number)
    {
        if (is_null($supplier_invoice_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_invoice_number cannot be null');
        }
        $this->container['supplier_invoice_number'] = $supplier_invoice_number;

        return $this;
    }

    /**
     * Gets amount_in_base_currency
     *
     * @return float|null
     */
    public function getAmountInBaseCurrency()
    {
        return $this->container['amount_in_base_currency'];
    }

    /**
     * Sets amount_in_base_currency
     *
     * @param float|null $amount_in_base_currency The total entry amount in base currency.
     *
     * @return self
     */
    public function setAmountInBaseCurrency($amount_in_base_currency)
    {
        if (is_null($amount_in_base_currency)) {
            throw new \InvalidArgumentException('non-nullable amount_in_base_currency cannot be null');
        }
        $this->container['amount_in_base_currency'] = $amount_in_base_currency;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The ISO 4217 currency code of the entry.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }

        if ((!preg_match("/[a-zA-Z]{3}/", $currency))) {
            throw new \InvalidArgumentException("invalid value for \$currency when calling Entry., must conform to the pattern /[a-zA-Z]{3}/.");
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Entry issue date. The date is formatted according to ISO-8601(YYYY-MM-DD).
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }

        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}/", $date))) {
            throw new \InvalidArgumentException("invalid value for \$date when calling Entry., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}/.");
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string|null $due_date The date the invoice is due for payment. Format according to ISO-8601 (YYYY-MM-DD).
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }

        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}/", $due_date))) {
            throw new \InvalidArgumentException("invalid value for \$due_date when calling Entry., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}/.");
        }

        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets departmental_distribution
     *
     * @return \EconomicRest\Model\DepartmentalDistributionHandler|null
     */
    public function getDepartmentalDistribution()
    {
        return $this->container['departmental_distribution'];
    }

    /**
     * Sets departmental_distribution
     *
     * @param \EconomicRest\Model\DepartmentalDistributionHandler|null $departmental_distribution departmental_distribution
     *
     * @return self
     */
    public function setDepartmentalDistribution($departmental_distribution)
    {
        if (is_null($departmental_distribution)) {
            throw new \InvalidArgumentException('non-nullable departmental_distribution cannot be null');
        }
        $this->container['departmental_distribution'] = $departmental_distribution;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \EconomicRest\Model\ProjectHandler|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \EconomicRest\Model\ProjectHandler|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets cost_type
     *
     * @return \EconomicRest\Model\CostTypeHandler|null
     */
    public function getCostType()
    {
        return $this->container['cost_type'];
    }

    /**
     * Sets cost_type
     *
     * @param \EconomicRest\Model\CostTypeHandler|null $cost_type cost_type
     *
     * @return self
     */
    public function setCostType($cost_type)
    {
        if (is_null($cost_type)) {
            throw new \InvalidArgumentException('non-nullable cost_type cannot be null');
        }
        $this->container['cost_type'] = $cost_type;

        return $this;
    }

    /**
     * Gets entry_number
     *
     * @return int|null
     */
    public function getEntryNumber()
    {
        return $this->container['entry_number'];
    }

    /**
     * Sets entry_number
     *
     * @param int|null $entry_number The unique identifier of the entry line.
     *
     * @return self
     */
    public function setEntryNumber($entry_number)
    {
        if (is_null($entry_number)) {
            throw new \InvalidArgumentException('non-nullable entry_number cannot be null');
        }
        $this->container['entry_number'] = $entry_number;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text A short description about the entry.
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        if ((mb_strlen($text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $text when calling Entry., must be smaller than or equal to 255.');
        }

        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets entry_type
     *
     * @return string|null
     */
    public function getEntryType()
    {
        return $this->container['entry_type'];
    }

    /**
     * Sets entry_type
     *
     * @param string|null $entry_type The type of entry.
     *
     * @return self
     */
    public function setEntryType($entry_type)
    {
        if (is_null($entry_type)) {
            throw new \InvalidArgumentException('non-nullable entry_type cannot be null');
        }
        $allowedValues = $this->getEntryTypeAllowableValues();
        if (!in_array($entry_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entry_type', must be one of '%s'",
                    $entry_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entry_type'] = $entry_type;

        return $this;
    }

    /**
     * Gets vat_account
     *
     * @return \EconomicRest\Model\VatAccountHandler|null
     */
    public function getVatAccount()
    {
        return $this->container['vat_account'];
    }

    /**
     * Sets vat_account
     *
     * @param \EconomicRest\Model\VatAccountHandler|null $vat_account vat_account
     *
     * @return self
     */
    public function setVatAccount($vat_account)
    {
        if (is_null($vat_account)) {
            throw new \InvalidArgumentException('non-nullable vat_account cannot be null');
        }
        $this->container['vat_account'] = $vat_account;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \EconomicRest\Model\CustomerHandler|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \EconomicRest\Model\CustomerHandler|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return \EconomicRest\Model\SupplierHandler|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param \EconomicRest\Model\SupplierHandler|null $supplier supplier
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            throw new \InvalidArgumentException('non-nullable supplier cannot be null');
        }
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets unit1
     *
     * @return \EconomicRest\Model\UnitHandler|null
     */
    public function getUnit1()
    {
        return $this->container['unit1'];
    }

    /**
     * Sets unit1
     *
     * @param \EconomicRest\Model\UnitHandler|null $unit1 unit1
     *
     * @return self
     */
    public function setUnit1($unit1)
    {
        if (is_null($unit1)) {
            throw new \InvalidArgumentException('non-nullable unit1 cannot be null');
        }
        $this->container['unit1'] = $unit1;

        return $this;
    }

    /**
     * Gets unit2
     *
     * @return \EconomicRest\Model\UnitHandler|null
     */
    public function getUnit2()
    {
        return $this->container['unit2'];
    }

    /**
     * Sets unit2
     *
     * @param \EconomicRest\Model\UnitHandler|null $unit2 unit2
     *
     * @return self
     */
    public function setUnit2($unit2)
    {
        if (is_null($unit2)) {
            throw new \InvalidArgumentException('non-nullable unit2 cannot be null');
        }
        $this->container['unit2'] = $unit2;

        return $this;
    }

    /**
     * Gets quantity1
     *
     * @return float|null
     */
    public function getQuantity1()
    {
        return $this->container['quantity1'];
    }

    /**
     * Sets quantity1
     *
     * @param float|null $quantity1 Requires dimension module.
     *
     * @return self
     */
    public function setQuantity1($quantity1)
    {
        if (is_null($quantity1)) {
            throw new \InvalidArgumentException('non-nullable quantity1 cannot be null');
        }
        $this->container['quantity1'] = $quantity1;

        return $this;
    }

    /**
     * Gets quantity2
     *
     * @return float|null
     */
    public function getQuantity2()
    {
        return $this->container['quantity2'];
    }

    /**
     * Sets quantity2
     *
     * @param float|null $quantity2 Requires dimension module.
     *
     * @return self
     */
    public function setQuantity2($quantity2)
    {
        if (is_null($quantity2)) {
            throw new \InvalidArgumentException('non-nullable quantity2 cannot be null');
        }
        $this->container['quantity2'] = $quantity2;

        return $this;
    }

    /**
     * Gets voucher_number
     *
     * @return int|null
     */
    public function getVoucherNumber()
    {
        return $this->container['voucher_number'];
    }

    /**
     * Sets voucher_number
     *
     * @param int|null $voucher_number The identifier of the voucher this entry belongs to.
     *
     * @return self
     */
    public function setVoucherNumber($voucher_number)
    {
        if (is_null($voucher_number)) {
            throw new \InvalidArgumentException('non-nullable voucher_number cannot be null');
        }
        $this->container['voucher_number'] = $voucher_number;

        return $this;
    }

    /**
     * Gets booked_invoice
     *
     * @return \EconomicRest\Model\BookedInvoiceHandler|null
     */
    public function getBookedInvoice()
    {
        return $this->container['booked_invoice'];
    }

    /**
     * Sets booked_invoice
     *
     * @param \EconomicRest\Model\BookedInvoiceHandler|null $booked_invoice booked_invoice
     *
     * @return self
     */
    public function setBookedInvoice($booked_invoice)
    {
        if (is_null($booked_invoice)) {
            throw new \InvalidArgumentException('non-nullable booked_invoice cannot be null');
        }
        $this->container['booked_invoice'] = $booked_invoice;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number Unique identifier for reminders and invoices.
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets remainder
     *
     * @return float|null
     */
    public function getRemainder()
    {
        return $this->container['remainder'];
    }

    /**
     * Sets remainder
     *
     * @param float|null $remainder The remainder on the entry.
     *
     * @return self
     */
    public function setRemainder($remainder)
    {
        if (is_null($remainder)) {
            throw new \InvalidArgumentException('non-nullable remainder cannot be null');
        }
        $this->container['remainder'] = $remainder;

        return $this;
    }

    /**
     * Gets remainder_in_base_currency
     *
     * @return float|null
     */
    public function getRemainderInBaseCurrency()
    {
        return $this->container['remainder_in_base_currency'];
    }

    /**
     * Sets remainder_in_base_currency
     *
     * @param float|null $remainder_in_base_currency The remainder in base currency on the entry.
     *
     * @return self
     */
    public function setRemainderInBaseCurrency($remainder_in_base_currency)
    {
        if (is_null($remainder_in_base_currency)) {
            throw new \InvalidArgumentException('non-nullable remainder_in_base_currency cannot be null');
        }
        $this->container['remainder_in_base_currency'] = $remainder_in_base_currency;

        return $this;
    }

    /**
     * Gets payment_details
     *
     * @return \EconomicRest\Model\PaymentDetailsHandler|null
     */
    public function getPaymentDetails()
    {
        return $this->container['payment_details'];
    }

    /**
     * Sets payment_details
     *
     * @param \EconomicRest\Model\PaymentDetailsHandler|null $payment_details payment_details
     *
     * @return self
     */
    public function setPaymentDetails($payment_details)
    {
        if (is_null($payment_details)) {
            throw new \InvalidArgumentException('non-nullable payment_details cannot be null');
        }
        $this->container['payment_details'] = $payment_details;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self A unique reference to the entry resource.
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


