<?php
/**
 * Account
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * e-conomic JSON-schema REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EconomicRest\Model;

use \ArrayAccess;
use \EconomicRest\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Account implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return AccountModelFields
      */
    public static function GetModelFields(): AccountModelFields
    {
        return new AccountModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return AccountModelAttributes
      */
    public static function GetModelAttributes(): AccountModelAttributes
    {
        return new AccountModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_number' => 'int',
        'account_type' => 'string',
        'balance' => 'float',
        'draft_balance' => 'float',
        'barred' => 'bool',
        'block_direct_entries' => 'bool',
        'contra_account' => '\EconomicRest\Model\AccountHandler',
        'debit_credit' => 'string',
        'name' => 'string',
        'vat_account' => '\EconomicRest\Model\VatCodeHandler',
        'accounts_summed' => '\EconomicRest\Model\AccountInterval[]',
        'total_from_account' => '\EconomicRest\Model\AccountHandler',
        'accounting_years' => 'string',
        'self' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_number' => null,
        'account_type' => null,
        'balance' => null,
        'draft_balance' => null,
        'barred' => null,
        'block_direct_entries' => null,
        'contra_account' => null,
        'debit_credit' => null,
        'name' => null,
        'vat_account' => null,
        'accounts_summed' => null,
        'total_from_account' => null,
        'accounting_years' => 'uri',
        'self' => 'uri'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_number' => false,
        'account_type' => false,
        'balance' => false,
        'draft_balance' => false,
        'barred' => false,
        'block_direct_entries' => false,
        'contra_account' => false,
        'debit_credit' => false,
        'name' => false,
        'vat_account' => false,
        'accounts_summed' => false,
        'total_from_account' => false,
        'accounting_years' => false,
        'self' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number' => 'accountNumber',
        'account_type' => 'accountType',
        'balance' => 'balance',
        'draft_balance' => 'draftBalance',
        'barred' => 'barred',
        'block_direct_entries' => 'blockDirectEntries',
        'contra_account' => 'contraAccount',
        'debit_credit' => 'debitCredit',
        'name' => 'name',
        'vat_account' => 'vatAccount',
        'accounts_summed' => 'accountsSummed',
        'total_from_account' => 'totalFromAccount',
        'accounting_years' => 'accountingYears',
        'self' => 'self'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number' => 'setAccountNumber',
        'account_type' => 'setAccountType',
        'balance' => 'setBalance',
        'draft_balance' => 'setDraftBalance',
        'barred' => 'setBarred',
        'block_direct_entries' => 'setBlockDirectEntries',
        'contra_account' => 'setContraAccount',
        'debit_credit' => 'setDebitCredit',
        'name' => 'setName',
        'vat_account' => 'setVatAccount',
        'accounts_summed' => 'setAccountsSummed',
        'total_from_account' => 'setTotalFromAccount',
        'accounting_years' => 'setAccountingYears',
        'self' => 'setSelf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number' => 'getAccountNumber',
        'account_type' => 'getAccountType',
        'balance' => 'getBalance',
        'draft_balance' => 'getDraftBalance',
        'barred' => 'getBarred',
        'block_direct_entries' => 'getBlockDirectEntries',
        'contra_account' => 'getContraAccount',
        'debit_credit' => 'getDebitCredit',
        'name' => 'getName',
        'vat_account' => 'getVatAccount',
        'accounts_summed' => 'getAccountsSummed',
        'total_from_account' => 'getTotalFromAccount',
        'accounting_years' => 'getAccountingYears',
        'self' => 'getSelf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACCOUNT_TYPE_PROFIT_AND_LOSS = 'profitAndLoss';
    public const ACCOUNT_TYPE_STATUS = 'status';
    public const ACCOUNT_TYPE_TOTAL_FROM = 'totalFrom';
    public const ACCOUNT_TYPE_HEADING = 'heading';
    public const ACCOUNT_TYPE_HEADING_START = 'headingStart';
    public const ACCOUNT_TYPE_SUM_INTERVAL = 'sumInterval';
    public const ACCOUNT_TYPE_SUM_ALPHA = 'sumAlpha';
    public const DEBIT_CREDIT_DEBIT = 'debit';
    public const DEBIT_CREDIT_CREDIT = 'credit';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_PROFIT_AND_LOSS,
            self::ACCOUNT_TYPE_STATUS,
            self::ACCOUNT_TYPE_TOTAL_FROM,
            self::ACCOUNT_TYPE_HEADING,
            self::ACCOUNT_TYPE_HEADING_START,
            self::ACCOUNT_TYPE_SUM_INTERVAL,
            self::ACCOUNT_TYPE_SUM_ALPHA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDebitCreditAllowableValues()
    {
        return [
            self::DEBIT_CREDIT_DEBIT,
            self::DEBIT_CREDIT_CREDIT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], 'profitAndLoss');
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('draft_balance', $data ?? [], null);
        $this->setIfExists('barred', $data ?? [], null);
        $this->setIfExists('block_direct_entries', $data ?? [], null);
        $this->setIfExists('contra_account', $data ?? [], null);
        $this->setIfExists('debit_credit', $data ?? [], 'debit');
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('vat_account', $data ?? [], null);
        $this->setIfExists('accounts_summed', $data ?? [], null);
        $this->setIfExists('total_from_account', $data ?? [], null);
        $this->setIfExists('accounting_years', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDebitCreditAllowableValues();
        if (!is_null($this->container['debit_credit']) && !in_array($this->container['debit_credit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'debit_credit', must be one of '%s'",
                $this->container['debit_credit'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 125)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 125.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number
     *
     * @return int|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param int|null $account_number The account's number.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type The type of account in the chart of accounts.
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance The current balance of the account.
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets draft_balance
     *
     * @return float|null
     */
    public function getDraftBalance()
    {
        return $this->container['draft_balance'];
    }

    /**
     * Sets draft_balance
     *
     * @param float|null $draft_balance The current balance of the account including draft (not yet booked) entries.
     *
     * @return self
     */
    public function setDraftBalance($draft_balance)
    {
        if (is_null($draft_balance)) {
            throw new \InvalidArgumentException('non-nullable draft_balance cannot be null');
        }
        $this->container['draft_balance'] = $draft_balance;

        return $this;
    }

    /**
     * Gets barred
     *
     * @return bool|null
     */
    public function getBarred()
    {
        return $this->container['barred'];
    }

    /**
     * Sets barred
     *
     * @param bool|null $barred Shows if the account is barred from being used.
     *
     * @return self
     */
    public function setBarred($barred)
    {
        if (is_null($barred)) {
            throw new \InvalidArgumentException('non-nullable barred cannot be null');
        }
        $this->container['barred'] = $barred;

        return $this;
    }

    /**
     * Gets block_direct_entries
     *
     * @return bool|null
     */
    public function getBlockDirectEntries()
    {
        return $this->container['block_direct_entries'];
    }

    /**
     * Sets block_direct_entries
     *
     * @param bool|null $block_direct_entries Determines if the account can be manually updated with entries.
     *
     * @return self
     */
    public function setBlockDirectEntries($block_direct_entries)
    {
        if (is_null($block_direct_entries)) {
            throw new \InvalidArgumentException('non-nullable block_direct_entries cannot be null');
        }
        $this->container['block_direct_entries'] = $block_direct_entries;

        return $this;
    }

    /**
     * Gets contra_account
     *
     * @return \EconomicRest\Model\AccountHandler|null
     */
    public function getContraAccount()
    {
        return $this->container['contra_account'];
    }

    /**
     * Sets contra_account
     *
     * @param \EconomicRest\Model\AccountHandler|null $contra_account contra_account
     *
     * @return self
     */
    public function setContraAccount($contra_account)
    {
        if (is_null($contra_account)) {
            throw new \InvalidArgumentException('non-nullable contra_account cannot be null');
        }
        $this->container['contra_account'] = $contra_account;

        return $this;
    }

    /**
     * Gets debit_credit
     *
     * @return string|null
     */
    public function getDebitCredit()
    {
        return $this->container['debit_credit'];
    }

    /**
     * Sets debit_credit
     *
     * @param string|null $debit_credit Describes the default update type of the account.
     *
     * @return self
     */
    public function setDebitCredit($debit_credit)
    {
        if (is_null($debit_credit)) {
            throw new \InvalidArgumentException('non-nullable debit_credit cannot be null');
        }
        $allowedValues = $this->getDebitCreditAllowableValues();
        if (!in_array($debit_credit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'debit_credit', must be one of '%s'",
                    $debit_credit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['debit_credit'] = $debit_credit;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the account.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 125)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Account., must be smaller than or equal to 125.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets vat_account
     *
     * @return \EconomicRest\Model\VatCodeHandler|null
     */
    public function getVatAccount()
    {
        return $this->container['vat_account'];
    }

    /**
     * Sets vat_account
     *
     * @param \EconomicRest\Model\VatCodeHandler|null $vat_account vat_account
     *
     * @return self
     */
    public function setVatAccount($vat_account)
    {
        if (is_null($vat_account)) {
            throw new \InvalidArgumentException('non-nullable vat_account cannot be null');
        }
        $this->container['vat_account'] = $vat_account;

        return $this;
    }

    /**
     * Gets accounts_summed
     *
     * @return \EconomicRest\Model\AccountInterval[]|null
     */
    public function getAccountsSummed()
    {
        return $this->container['accounts_summed'];
    }

    /**
     * Sets accounts_summed
     *
     * @param \EconomicRest\Model\AccountInterval[]|null $accounts_summed An array of the account intervals used for calculating the total for this account.
     *
     * @return self
     */
    public function setAccountsSummed($accounts_summed)
    {
        if (is_null($accounts_summed)) {
            throw new \InvalidArgumentException('non-nullable accounts_summed cannot be null');
        }
        $this->container['accounts_summed'] = $accounts_summed;

        return $this;
    }

    /**
     * Gets total_from_account
     *
     * @return \EconomicRest\Model\AccountHandler|null
     */
    public function getTotalFromAccount()
    {
        return $this->container['total_from_account'];
    }

    /**
     * Sets total_from_account
     *
     * @param \EconomicRest\Model\AccountHandler|null $total_from_account total_from_account
     *
     * @return self
     */
    public function setTotalFromAccount($total_from_account)
    {
        if (is_null($total_from_account)) {
            throw new \InvalidArgumentException('non-nullable total_from_account cannot be null');
        }
        $this->container['total_from_account'] = $total_from_account;

        return $this;
    }

    /**
     * Gets accounting_years
     *
     * @return string|null
     */
    public function getAccountingYears()
    {
        return $this->container['accounting_years'];
    }

    /**
     * Sets accounting_years
     *
     * @param string|null $accounting_years A link to a list of accounting years for which the account is usable.
     *
     * @return self
     */
    public function setAccountingYears($accounting_years)
    {
        if (is_null($accounting_years)) {
            throw new \InvalidArgumentException('non-nullable accounting_years cannot be null');
        }
        $this->container['accounting_years'] = $accounting_years;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self A unique reference to the account resource.
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


