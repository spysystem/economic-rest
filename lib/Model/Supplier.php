<?php
/**
 * Supplier
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * e-conomic JSON-schema REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EconomicRest\Model;

use \ArrayAccess;
use \EconomicRest\ObjectSerializer;

/**
 * Supplier Class Doc Comment
 *
 * @category Class
 * @description Schema for retrieval of a supplier resource.
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Supplier implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SupplierModelFields
      */
    public static function GetModelFields(): SupplierModelFields
    {
        return new SupplierModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SupplierModelAttributes
      */
    public static function GetModelAttributes(): SupplierModelAttributes
    {
        return new SupplierModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Supplier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'attention' => '\EconomicRest\Model\SupplierAttention',
        'bank_account' => 'string',
        'barred' => 'bool',
        'city' => 'string',
        'contacts' => 'string',
        'corporate_identification_number' => 'string',
        'cost_account' => '\EconomicRest\Model\SupplierCostAccount',
        'country' => 'string',
        'currency' => 'string',
        'default_invoice_text' => 'string',
        'layout' => '\EconomicRest\Model\SupplierLayout',
        'email' => 'string',
        'name' => 'string',
        'payment_terms' => '\EconomicRest\Model\SupplierPaymentTerms',
        'phone' => 'string',
        'remittance_advice' => '\EconomicRest\Model\SupplierRemittanceAdvice',
        'sales_person' => '\EconomicRest\Model\SupplierSalesPerson',
        'supplier_contact' => '\EconomicRest\Model\SupplierSupplierContact',
        'supplier_group' => '\EconomicRest\Model\SupplierSupplierGroup',
        'supplier_number' => 'int',
        'vat_zone' => '\EconomicRest\Model\VatZoneHandler',
        'zip' => 'string',
        'self' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'attention' => null,
        'bank_account' => null,
        'barred' => null,
        'city' => null,
        'contacts' => 'uri',
        'corporate_identification_number' => null,
        'cost_account' => null,
        'country' => null,
        'currency' => null,
        'default_invoice_text' => null,
        'layout' => null,
        'email' => null,
        'name' => null,
        'payment_terms' => null,
        'phone' => null,
        'remittance_advice' => null,
        'sales_person' => null,
        'supplier_contact' => null,
        'supplier_group' => null,
        'supplier_number' => null,
        'vat_zone' => null,
        'zip' => null,
        'self' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
		'attention' => false,
		'bank_account' => false,
		'barred' => false,
		'city' => false,
		'contacts' => false,
		'corporate_identification_number' => false,
		'cost_account' => false,
		'country' => false,
		'currency' => false,
		'default_invoice_text' => false,
		'layout' => false,
		'email' => false,
		'name' => false,
		'payment_terms' => false,
		'phone' => false,
		'remittance_advice' => false,
		'sales_person' => false,
		'supplier_contact' => false,
		'supplier_group' => false,
		'supplier_number' => false,
		'vat_zone' => false,
		'zip' => false,
		'self' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'attention' => 'attention',
        'bank_account' => 'bankAccount',
        'barred' => 'barred',
        'city' => 'city',
        'contacts' => 'contacts',
        'corporate_identification_number' => 'corporateIdentificationNumber',
        'cost_account' => 'costAccount',
        'country' => 'country',
        'currency' => 'currency',
        'default_invoice_text' => 'defaultInvoiceText',
        'layout' => 'layout',
        'email' => 'email',
        'name' => 'name',
        'payment_terms' => 'paymentTerms',
        'phone' => 'phone',
        'remittance_advice' => 'remittanceAdvice',
        'sales_person' => 'salesPerson',
        'supplier_contact' => 'supplierContact',
        'supplier_group' => 'supplierGroup',
        'supplier_number' => 'supplierNumber',
        'vat_zone' => 'vatZone',
        'zip' => 'zip',
        'self' => 'self'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'attention' => 'setAttention',
        'bank_account' => 'setBankAccount',
        'barred' => 'setBarred',
        'city' => 'setCity',
        'contacts' => 'setContacts',
        'corporate_identification_number' => 'setCorporateIdentificationNumber',
        'cost_account' => 'setCostAccount',
        'country' => 'setCountry',
        'currency' => 'setCurrency',
        'default_invoice_text' => 'setDefaultInvoiceText',
        'layout' => 'setLayout',
        'email' => 'setEmail',
        'name' => 'setName',
        'payment_terms' => 'setPaymentTerms',
        'phone' => 'setPhone',
        'remittance_advice' => 'setRemittanceAdvice',
        'sales_person' => 'setSalesPerson',
        'supplier_contact' => 'setSupplierContact',
        'supplier_group' => 'setSupplierGroup',
        'supplier_number' => 'setSupplierNumber',
        'vat_zone' => 'setVatZone',
        'zip' => 'setZip',
        'self' => 'setSelf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'attention' => 'getAttention',
        'bank_account' => 'getBankAccount',
        'barred' => 'getBarred',
        'city' => 'getCity',
        'contacts' => 'getContacts',
        'corporate_identification_number' => 'getCorporateIdentificationNumber',
        'cost_account' => 'getCostAccount',
        'country' => 'getCountry',
        'currency' => 'getCurrency',
        'default_invoice_text' => 'getDefaultInvoiceText',
        'layout' => 'getLayout',
        'email' => 'getEmail',
        'name' => 'getName',
        'payment_terms' => 'getPaymentTerms',
        'phone' => 'getPhone',
        'remittance_advice' => 'getRemittanceAdvice',
        'sales_person' => 'getSalesPerson',
        'supplier_contact' => 'getSupplierContact',
        'supplier_group' => 'getSupplierGroup',
        'supplier_number' => 'getSupplierNumber',
        'vat_zone' => 'getVatZone',
        'zip' => 'getZip',
        'self' => 'getSelf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('attention', $data ?? [], null);
        $this->setIfExists('bank_account', $data ?? [], null);
        $this->setIfExists('barred', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('corporate_identification_number', $data ?? [], null);
        $this->setIfExists('cost_account', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('default_invoice_text', $data ?? [], null);
        $this->setIfExists('layout', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('payment_terms', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('remittance_advice', $data ?? [], null);
        $this->setIfExists('sales_person', $data ?? [], null);
        $this->setIfExists('supplier_contact', $data ?? [], null);
        $this->setIfExists('supplier_group', $data ?? [], null);
        $this->setIfExists('supplier_number', $data ?? [], null);
        $this->setIfExists('vat_zone', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 255)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bank_account']) && (mb_strlen($this->container['bank_account']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_account', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['corporate_identification_number']) && (mb_strlen($this->container['corporate_identification_number']) > 40)) {
            $invalidProperties[] = "invalid value for 'corporate_identification_number', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 50)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['default_invoice_text']) && (mb_strlen($this->container['default_invoice_text']) > 100)) {
            $invalidProperties[] = "invalid value for 'default_invoice_text', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 20)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['supplier_number']) && ($this->container['supplier_number'] > 999999999)) {
            $invalidProperties[] = "invalid value for 'supplier_number', must be smaller than or equal to 999999999.";
        }

        if (!is_null($this->container['supplier_number']) && ($this->container['supplier_number'] < 1)) {
            $invalidProperties[] = "invalid value for 'supplier_number', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['zip']) && (mb_strlen($this->container['zip']) > 10)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address for the supplier including street and number.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        if ((mb_strlen($address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address when calling Supplier., must be smaller than or equal to 255.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets attention
     *
     * @return \EconomicRest\Model\SupplierAttention|null
     */
    public function getAttention()
    {
        return $this->container['attention'];
    }

    /**
     * Sets attention
     *
     * @param \EconomicRest\Model\SupplierAttention|null $attention attention
     *
     * @return self
     */
    public function setAttention($attention)
    {
        if (is_null($attention)) {
            throw new \InvalidArgumentException('non-nullable attention cannot be null');
        }
        $this->container['attention'] = $attention;

        return $this;
    }

    /**
     * Gets bank_account
     *
     * @return string|null
     */
    public function getBankAccount()
    {
        return $this->container['bank_account'];
    }

    /**
     * Sets bank_account
     *
     * @param string|null $bank_account The supplier's bank account.
     *
     * @return self
     */
    public function setBankAccount($bank_account)
    {
        if (is_null($bank_account)) {
            throw new \InvalidArgumentException('non-nullable bank_account cannot be null');
        }
        if ((mb_strlen($bank_account) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_account when calling Supplier., must be smaller than or equal to 50.');
        }

        $this->container['bank_account'] = $bank_account;

        return $this;
    }

    /**
     * Gets barred
     *
     * @return bool|null
     */
    public function getBarred()
    {
        return $this->container['barred'];
    }

    /**
     * Sets barred
     *
     * @param bool|null $barred Boolean indication of whether the supplier is barred.
     *
     * @return self
     */
    public function setBarred($barred)
    {
        if (is_null($barred)) {
            throw new \InvalidArgumentException('non-nullable barred cannot be null');
        }
        $this->container['barred'] = $barred;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The supplier's city.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Supplier., must be smaller than or equal to 50.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return string|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param string|null $contacts A unique reference to the supplier contacts collection.
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets corporate_identification_number
     *
     * @return string|null
     */
    public function getCorporateIdentificationNumber()
    {
        return $this->container['corporate_identification_number'];
    }

    /**
     * Sets corporate_identification_number
     *
     * @param string|null $corporate_identification_number Company Identification Number. For example CVR in Denmark.
     *
     * @return self
     */
    public function setCorporateIdentificationNumber($corporate_identification_number)
    {
        if (is_null($corporate_identification_number)) {
            throw new \InvalidArgumentException('non-nullable corporate_identification_number cannot be null');
        }
        if ((mb_strlen($corporate_identification_number) > 40)) {
            throw new \InvalidArgumentException('invalid length for $corporate_identification_number when calling Supplier., must be smaller than or equal to 40.');
        }

        $this->container['corporate_identification_number'] = $corporate_identification_number;

        return $this;
    }

    /**
     * Gets cost_account
     *
     * @return \EconomicRest\Model\SupplierCostAccount|null
     */
    public function getCostAccount()
    {
        return $this->container['cost_account'];
    }

    /**
     * Sets cost_account
     *
     * @param \EconomicRest\Model\SupplierCostAccount|null $cost_account cost_account
     *
     * @return self
     */
    public function setCostAccount($cost_account)
    {
        if (is_null($cost_account)) {
            throw new \InvalidArgumentException('non-nullable cost_account cannot be null');
        }
        $this->container['cost_account'] = $cost_account;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The supplier's country.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if ((mb_strlen($country) > 50)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Supplier., must be smaller than or equal to 50.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Default currency used when purchasing from the supplier.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        if ((mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling Supplier., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling Supplier., must be bigger than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets default_invoice_text
     *
     * @return string|null
     */
    public function getDefaultInvoiceText()
    {
        return $this->container['default_invoice_text'];
    }

    /**
     * Sets default_invoice_text
     *
     * @param string|null $default_invoice_text The default invoice text for the supplier.
     *
     * @return self
     */
    public function setDefaultInvoiceText($default_invoice_text)
    {
        if (is_null($default_invoice_text)) {
            throw new \InvalidArgumentException('non-nullable default_invoice_text cannot be null');
        }
        if ((mb_strlen($default_invoice_text) > 100)) {
            throw new \InvalidArgumentException('invalid length for $default_invoice_text when calling Supplier., must be smaller than or equal to 100.');
        }

        $this->container['default_invoice_text'] = $default_invoice_text;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return \EconomicRest\Model\SupplierLayout|null
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param \EconomicRest\Model\SupplierLayout|null $layout layout
     *
     * @return self
     */
    public function setLayout($layout)
    {
        if (is_null($layout)) {
            throw new \InvalidArgumentException('non-nullable layout cannot be null');
        }
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The supplier's e-mail address. Note: you can specify multiple email addresses in this field, separated by a space.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Supplier., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The supplier name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Supplier., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Supplier., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return \EconomicRest\Model\SupplierPaymentTerms|null
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param \EconomicRest\Model\SupplierPaymentTerms|null $payment_terms payment_terms
     *
     * @return self
     */
    public function setPaymentTerms($payment_terms)
    {
        if (is_null($payment_terms)) {
            throw new \InvalidArgumentException('non-nullable payment_terms cannot be null');
        }
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The supplier's phone number.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        if ((mb_strlen($phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Supplier., must be smaller than or equal to 20.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets remittance_advice
     *
     * @return \EconomicRest\Model\SupplierRemittanceAdvice|null
     */
    public function getRemittanceAdvice()
    {
        return $this->container['remittance_advice'];
    }

    /**
     * Sets remittance_advice
     *
     * @param \EconomicRest\Model\SupplierRemittanceAdvice|null $remittance_advice remittance_advice
     *
     * @return self
     */
    public function setRemittanceAdvice($remittance_advice)
    {
        if (is_null($remittance_advice)) {
            throw new \InvalidArgumentException('non-nullable remittance_advice cannot be null');
        }
        $this->container['remittance_advice'] = $remittance_advice;

        return $this;
    }

    /**
     * Gets sales_person
     *
     * @return \EconomicRest\Model\SupplierSalesPerson|null
     */
    public function getSalesPerson()
    {
        return $this->container['sales_person'];
    }

    /**
     * Sets sales_person
     *
     * @param \EconomicRest\Model\SupplierSalesPerson|null $sales_person sales_person
     *
     * @return self
     */
    public function setSalesPerson($sales_person)
    {
        if (is_null($sales_person)) {
            throw new \InvalidArgumentException('non-nullable sales_person cannot be null');
        }
        $this->container['sales_person'] = $sales_person;

        return $this;
    }

    /**
     * Gets supplier_contact
     *
     * @return \EconomicRest\Model\SupplierSupplierContact|null
     */
    public function getSupplierContact()
    {
        return $this->container['supplier_contact'];
    }

    /**
     * Sets supplier_contact
     *
     * @param \EconomicRest\Model\SupplierSupplierContact|null $supplier_contact supplier_contact
     *
     * @return self
     */
    public function setSupplierContact($supplier_contact)
    {
        if (is_null($supplier_contact)) {
            throw new \InvalidArgumentException('non-nullable supplier_contact cannot be null');
        }
        $this->container['supplier_contact'] = $supplier_contact;

        return $this;
    }

    /**
     * Gets supplier_group
     *
     * @return \EconomicRest\Model\SupplierSupplierGroup|null
     */
    public function getSupplierGroup()
    {
        return $this->container['supplier_group'];
    }

    /**
     * Sets supplier_group
     *
     * @param \EconomicRest\Model\SupplierSupplierGroup|null $supplier_group supplier_group
     *
     * @return self
     */
    public function setSupplierGroup($supplier_group)
    {
        if (is_null($supplier_group)) {
            throw new \InvalidArgumentException('non-nullable supplier_group cannot be null');
        }
        $this->container['supplier_group'] = $supplier_group;

        return $this;
    }

    /**
     * Gets supplier_number
     *
     * @return int|null
     */
    public function getSupplierNumber()
    {
        return $this->container['supplier_number'];
    }

    /**
     * Sets supplier_number
     *
     * @param int|null $supplier_number The supplier number is a positive unique numerical identifier with a maximum of 9 digits.
     *
     * @return self
     */
    public function setSupplierNumber($supplier_number)
    {
        if (is_null($supplier_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_number cannot be null');
        }

        if (($supplier_number > 999999999)) {
            throw new \InvalidArgumentException('invalid value for $supplier_number when calling Supplier., must be smaller than or equal to 999999999.');
        }
        if (($supplier_number < 1)) {
            throw new \InvalidArgumentException('invalid value for $supplier_number when calling Supplier., must be bigger than or equal to 1.');
        }

        $this->container['supplier_number'] = $supplier_number;

        return $this;
    }

    /**
     * Gets vat_zone
     *
     * @return \EconomicRest\Model\VatZoneHandler|null
     */
    public function getVatZone()
    {
        return $this->container['vat_zone'];
    }

    /**
     * Sets vat_zone
     *
     * @param \EconomicRest\Model\VatZoneHandler|null $vat_zone vat_zone
     *
     * @return self
     */
    public function setVatZone($vat_zone)
    {
        if (is_null($vat_zone)) {
            throw new \InvalidArgumentException('non-nullable vat_zone cannot be null');
        }
        $this->container['vat_zone'] = $vat_zone;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip The suppliers zipcode.
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        if ((mb_strlen($zip) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling Supplier., must be smaller than or equal to 10.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self A unique self reference of the supplier.
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


