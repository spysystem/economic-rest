<?php
/**
 * PaymentTerm
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * e-conomic JSON-schema REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EconomicRest\Model;

use \ArrayAccess;
use \EconomicRest\ObjectSerializer;

/**
 * PaymentTerm Class Doc Comment
 *
 * @category Class
 * @description A schema for retrieval of a single payment term.
 * @package  EconomicRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentTerm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return PaymentTermModelFields
      */
    public static function GetModelFields(): PaymentTermModelFields
    {
        return new PaymentTermModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return PaymentTermModelAttributes
      */
    public static function GetModelAttributes(): PaymentTermModelAttributes
    {
        return new PaymentTermModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentTerm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payment_terms_number' => 'int',
        'days_of_credit' => 'int',
        'description' => 'string',
        'name' => 'string',
        'payment_terms_type' => 'string',
        'contra_account_for_prepaid_amount' => '\EconomicRest\Model\AccountHandler',
        'contra_account_for_remainder_amount' => '\EconomicRest\Model\AccountHandler',
        'percentage_for_prepaid_amount' => 'float',
        'percentage_for_remainder_amount' => 'float',
        'credit_card_company' => '\EconomicRest\Model\CustomerHandler',
        'self' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payment_terms_number' => null,
        'days_of_credit' => null,
        'description' => null,
        'name' => null,
        'payment_terms_type' => null,
        'contra_account_for_prepaid_amount' => null,
        'contra_account_for_remainder_amount' => null,
        'percentage_for_prepaid_amount' => null,
        'percentage_for_remainder_amount' => null,
        'credit_card_company' => null,
        'self' => 'uri'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payment_terms_number' => false,
		'days_of_credit' => false,
		'description' => false,
		'name' => false,
		'payment_terms_type' => false,
		'contra_account_for_prepaid_amount' => false,
		'contra_account_for_remainder_amount' => false,
		'percentage_for_prepaid_amount' => false,
		'percentage_for_remainder_amount' => false,
		'credit_card_company' => false,
		'self' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_terms_number' => 'paymentTermsNumber',
        'days_of_credit' => 'daysOfCredit',
        'description' => 'description',
        'name' => 'name',
        'payment_terms_type' => 'paymentTermsType',
        'contra_account_for_prepaid_amount' => 'contraAccountForPrepaidAmount',
        'contra_account_for_remainder_amount' => 'contraAccountForRemainderAmount',
        'percentage_for_prepaid_amount' => 'percentageForPrepaidAmount',
        'percentage_for_remainder_amount' => 'percentageForRemainderAmount',
        'credit_card_company' => 'creditCardCompany',
        'self' => 'self'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_terms_number' => 'setPaymentTermsNumber',
        'days_of_credit' => 'setDaysOfCredit',
        'description' => 'setDescription',
        'name' => 'setName',
        'payment_terms_type' => 'setPaymentTermsType',
        'contra_account_for_prepaid_amount' => 'setContraAccountForPrepaidAmount',
        'contra_account_for_remainder_amount' => 'setContraAccountForRemainderAmount',
        'percentage_for_prepaid_amount' => 'setPercentageForPrepaidAmount',
        'percentage_for_remainder_amount' => 'setPercentageForRemainderAmount',
        'credit_card_company' => 'setCreditCardCompany',
        'self' => 'setSelf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_terms_number' => 'getPaymentTermsNumber',
        'days_of_credit' => 'getDaysOfCredit',
        'description' => 'getDescription',
        'name' => 'getName',
        'payment_terms_type' => 'getPaymentTermsType',
        'contra_account_for_prepaid_amount' => 'getContraAccountForPrepaidAmount',
        'contra_account_for_remainder_amount' => 'getContraAccountForRemainderAmount',
        'percentage_for_prepaid_amount' => 'getPercentageForPrepaidAmount',
        'percentage_for_remainder_amount' => 'getPercentageForRemainderAmount',
        'credit_card_company' => 'getCreditCardCompany',
        'self' => 'getSelf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_TERMS_TYPE_NET = 'net';
    public const PAYMENT_TERMS_TYPE_INVOICE_MONTH = 'invoiceMonth';
    public const PAYMENT_TERMS_TYPE_PAID_IN_CASH = 'paidInCash';
    public const PAYMENT_TERMS_TYPE_PREPAID = 'prepaid';
    public const PAYMENT_TERMS_TYPE_DUE_DATE = 'dueDate';
    public const PAYMENT_TERMS_TYPE_FACTORING = 'factoring';
    public const PAYMENT_TERMS_TYPE_INVOICE_WEEK_STARTING_SUNDAY = 'invoiceWeekStartingSunday';
    public const PAYMENT_TERMS_TYPE_INVOICE_WEEK_STARTING_MONDAY = 'invoiceWeekStartingMonday';
    public const PAYMENT_TERMS_TYPE_CREDITCARD = 'creditcard';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTermsTypeAllowableValues()
    {
        return [
            self::PAYMENT_TERMS_TYPE_NET,
            self::PAYMENT_TERMS_TYPE_INVOICE_MONTH,
            self::PAYMENT_TERMS_TYPE_PAID_IN_CASH,
            self::PAYMENT_TERMS_TYPE_PREPAID,
            self::PAYMENT_TERMS_TYPE_DUE_DATE,
            self::PAYMENT_TERMS_TYPE_FACTORING,
            self::PAYMENT_TERMS_TYPE_INVOICE_WEEK_STARTING_SUNDAY,
            self::PAYMENT_TERMS_TYPE_INVOICE_WEEK_STARTING_MONDAY,
            self::PAYMENT_TERMS_TYPE_CREDITCARD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payment_terms_number', $data ?? [], null);
        $this->setIfExists('days_of_credit', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('payment_terms_type', $data ?? [], null);
        $this->setIfExists('contra_account_for_prepaid_amount', $data ?? [], null);
        $this->setIfExists('contra_account_for_remainder_amount', $data ?? [], null);
        $this->setIfExists('percentage_for_prepaid_amount', $data ?? [], null);
        $this->setIfExists('percentage_for_remainder_amount', $data ?? [], null);
        $this->setIfExists('credit_card_company', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getPaymentTermsTypeAllowableValues();
        if (!is_null($this->container['payment_terms_type']) && !in_array($this->container['payment_terms_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_terms_type', must be one of '%s'",
                $this->container['payment_terms_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_terms_number
     *
     * @return int|null
     */
    public function getPaymentTermsNumber()
    {
        return $this->container['payment_terms_number'];
    }

    /**
     * Sets payment_terms_number
     *
     * @param int|null $payment_terms_number A unique identifier of the payment term.
     *
     * @return self
     */
    public function setPaymentTermsNumber($payment_terms_number)
    {
        if (is_null($payment_terms_number)) {
            throw new \InvalidArgumentException('non-nullable payment_terms_number cannot be null');
        }
        $this->container['payment_terms_number'] = $payment_terms_number;

        return $this;
    }

    /**
     * Gets days_of_credit
     *
     * @return int|null
     */
    public function getDaysOfCredit()
    {
        return $this->container['days_of_credit'];
    }

    /**
     * Sets days_of_credit
     *
     * @param int|null $days_of_credit The number of days before payment must be made.
     *
     * @return self
     */
    public function setDaysOfCredit($days_of_credit)
    {
        if (is_null($days_of_credit)) {
            throw new \InvalidArgumentException('non-nullable days_of_credit cannot be null');
        }
        $this->container['days_of_credit'] = $days_of_credit;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the payment term.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling PaymentTerm., must be smaller than or equal to 1000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the payment term.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling PaymentTerm., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets payment_terms_type
     *
     * @return string|null
     */
    public function getPaymentTermsType()
    {
        return $this->container['payment_terms_type'];
    }

    /**
     * Sets payment_terms_type
     *
     * @param string|null $payment_terms_type The type of payment term defines how the payment term behaves.
     *
     * @return self
     */
    public function setPaymentTermsType($payment_terms_type)
    {
        if (is_null($payment_terms_type)) {
            throw new \InvalidArgumentException('non-nullable payment_terms_type cannot be null');
        }
        $allowedValues = $this->getPaymentTermsTypeAllowableValues();
        if (!in_array($payment_terms_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_terms_type', must be one of '%s'",
                    $payment_terms_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_terms_type'] = $payment_terms_type;

        return $this;
    }

    /**
     * Gets contra_account_for_prepaid_amount
     *
     * @return \EconomicRest\Model\AccountHandler|null
     */
    public function getContraAccountForPrepaidAmount()
    {
        return $this->container['contra_account_for_prepaid_amount'];
    }

    /**
     * Sets contra_account_for_prepaid_amount
     *
     * @param \EconomicRest\Model\AccountHandler|null $contra_account_for_prepaid_amount contra_account_for_prepaid_amount
     *
     * @return self
     */
    public function setContraAccountForPrepaidAmount($contra_account_for_prepaid_amount)
    {
        if (is_null($contra_account_for_prepaid_amount)) {
            throw new \InvalidArgumentException('non-nullable contra_account_for_prepaid_amount cannot be null');
        }
        $this->container['contra_account_for_prepaid_amount'] = $contra_account_for_prepaid_amount;

        return $this;
    }

    /**
     * Gets contra_account_for_remainder_amount
     *
     * @return \EconomicRest\Model\AccountHandler|null
     */
    public function getContraAccountForRemainderAmount()
    {
        return $this->container['contra_account_for_remainder_amount'];
    }

    /**
     * Sets contra_account_for_remainder_amount
     *
     * @param \EconomicRest\Model\AccountHandler|null $contra_account_for_remainder_amount contra_account_for_remainder_amount
     *
     * @return self
     */
    public function setContraAccountForRemainderAmount($contra_account_for_remainder_amount)
    {
        if (is_null($contra_account_for_remainder_amount)) {
            throw new \InvalidArgumentException('non-nullable contra_account_for_remainder_amount cannot be null');
        }
        $this->container['contra_account_for_remainder_amount'] = $contra_account_for_remainder_amount;

        return $this;
    }

    /**
     * Gets percentage_for_prepaid_amount
     *
     * @return float|null
     */
    public function getPercentageForPrepaidAmount()
    {
        return $this->container['percentage_for_prepaid_amount'];
    }

    /**
     * Sets percentage_for_prepaid_amount
     *
     * @param float|null $percentage_for_prepaid_amount The % to be pre paid.
     *
     * @return self
     */
    public function setPercentageForPrepaidAmount($percentage_for_prepaid_amount)
    {
        if (is_null($percentage_for_prepaid_amount)) {
            throw new \InvalidArgumentException('non-nullable percentage_for_prepaid_amount cannot be null');
        }
        $this->container['percentage_for_prepaid_amount'] = $percentage_for_prepaid_amount;

        return $this;
    }

    /**
     * Gets percentage_for_remainder_amount
     *
     * @return float|null
     */
    public function getPercentageForRemainderAmount()
    {
        return $this->container['percentage_for_remainder_amount'];
    }

    /**
     * Sets percentage_for_remainder_amount
     *
     * @param float|null $percentage_for_remainder_amount The % to be post paid.
     *
     * @return self
     */
    public function setPercentageForRemainderAmount($percentage_for_remainder_amount)
    {
        if (is_null($percentage_for_remainder_amount)) {
            throw new \InvalidArgumentException('non-nullable percentage_for_remainder_amount cannot be null');
        }
        $this->container['percentage_for_remainder_amount'] = $percentage_for_remainder_amount;

        return $this;
    }

    /**
     * Gets credit_card_company
     *
     * @return \EconomicRest\Model\CustomerHandler|null
     */
    public function getCreditCardCompany()
    {
        return $this->container['credit_card_company'];
    }

    /**
     * Sets credit_card_company
     *
     * @param \EconomicRest\Model\CustomerHandler|null $credit_card_company credit_card_company
     *
     * @return self
     */
    public function setCreditCardCompany($credit_card_company)
    {
        if (is_null($credit_card_company)) {
            throw new \InvalidArgumentException('non-nullable credit_card_company cannot be null');
        }
        $this->container['credit_card_company'] = $credit_card_company;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self A unique link reference to the payment term item.
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


